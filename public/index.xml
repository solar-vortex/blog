<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Solar Vortex</title>
    <link>//localhost:1313/Solar-Vortex/</link>
    <description>Recent content on Solar Vortex</description>
    <generator>Hugo -- 0.144.1</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Feb 2025 17:08:07 +0530</lastBuildDate>
    <atom:link href="//localhost:1313/Solar-Vortex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running Custom WebGL Shaders Using Deck.gl for Solar Potential Analysis</title>
      <link>//localhost:1313/Solar-Vortex/post/customshaders/</link>
      <pubDate>Mon, 10 Feb 2025 17:08:07 +0530</pubDate>
      <guid>//localhost:1313/Solar-Vortex/post/customshaders/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Accurate solar potential analysis requires &lt;strong&gt;precise shadow modeling&lt;/strong&gt;—a challenge when dealing with large-scale city models in real time. Traditional GIS tools often rely on precomputed static shadow maps, but for &lt;strong&gt;dynamic sun positions and interactive analysis&lt;/strong&gt;, we need a more flexible approach.&lt;/p&gt;
&lt;p&gt;Leveraging &lt;a href=&#34;https://www.deck.gl&#34;&gt;&lt;strong&gt;Deck.gl&amp;rsquo;s&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;WebGL-powered rendering pipeline&lt;/strong&gt;, we implemented a &lt;strong&gt;custom shader-based solution&lt;/strong&gt; to calculate &lt;strong&gt;real-time solar exposure&lt;/strong&gt; on buildings. By extending Deck.gl’s built-in layers with custom &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_on_the_web/GLSL_Shaders&#34;&gt;&lt;strong&gt;GLSL shaders&lt;/strong&gt;&lt;/a&gt;, we were able to:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
